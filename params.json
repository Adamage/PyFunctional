{"name":"Scalafunctional","tagline":"Python library to provide chain functional programming on lists. ScalaFunctional is inspired by Scala and Apache Spark","body":"<a href=\"https://travis-ci.org/EntilZha/ScalaFunctional\">\r\n\t<img src=\"https://travis-ci.org/EntilZha/ScalaFunctional.svg?branch=master\"/>\r\n</a>\r\n\r\n# Motivation\r\nHaving programmed functionally in Scala and now using Python I missed the syntax/style for it from Scala. Most of that can be summed up by comparing the Scala style vs Python style for taking a list, filtering on a criteria, mapping a function to it, then reducing it. Below is a comparison of the default Python style and the Scala inspired style that ScalaFunctional uses.\r\n\r\n```python\r\nl = [1, 2, -1, -2]\r\nf = lambda x: x > 0\r\ng = lambda x: x * 2\r\nq = lambda x, y: 2 * x + y\r\n\r\n# Python style\r\nreduce(q, map(g, filter(f, l)))\r\n\r\n# Python list comprehension\r\nreduce(q, [g(x) for x in l if f(x)])\r\n\r\n# ScalaFunction style\r\nfrom functional import seq\r\nseq(l).filter(f).map(g).reduce(q)\r\n```\r\n\r\n# Inspiration\r\nAlmost all inspiration is either from [scala docs](http://www.scala-lang.org/api/current/#scala.Array) or [spark docs](https://spark.apache.org/docs/latest/programming-guide.html#transformations)\r\n\r\n# Usage\r\nTo use ScalaFunctional, you need only include: `from functional import seq`. `seq` is a function which takes as argument a list and returns a wrapper on that list that provides the extensions for functional programming using Scala style. It also provides some common functions which Python doesn't provide such as group by and flat map. The wrapper class `FunctionalSequence` also implements operations such as equals, repr, not equal, str etc by deferring them to the passed sequence.\r\n\r\n# Installation\r\nFor common use, you can install via the command line and pip: `pip install scalafunctional`. Then in your code import it via \r\n`from functional import seq`. For developers, clone the repo then run `python setup.py develop`.\r\n\r\n# Examples\r\n## Number twiddling\r\n```python\r\nseq([1, 2, 3, 0, -1, -2, 3]).filter(lambda x: x > 0).filter(lambda x: x < 2)\r\n# -> [1]\r\nseq([1, 1, 2, -2, 5]).distinct()\r\n# -> [1, 2, -5, -2]\r\nseq([[1, 1], [2, 3], [5, -1]]).flat_map(lambda x: x).sum()\r\n# -> 11\r\nseq([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"a\", 2), (\"c\", 5)]).group_by(lambda x: x[0])\r\n# -> {'a': [('a', 1), ('a', 2)], 'c': [('c', 3), ('c', 5)], 'b': [('b', 2)]}\r\np1, p2 = seq([1, 2, 3, -1, -2, -3]).partition(lambda x: x > 0)\r\np1.reduce(lambda x, y: x * y)\r\n# -> 6\r\np2.reduce(lambda x, y: x + y)\r\n# -> -6\r\nseq([2, 1, 3]).sorted()\r\n# -> [1, 2, 3]\r\nseq([1, 2, 3])[0]\r\n# -> 1\r\nseq([1, 2, 3])[-1]\r\n# -> 3\r\n```\r\n## Word count in one line\r\n```python\r\nl = seq(\"the why the what of word counting of english\".split(\" \"))\r\nl.map(lambda word: (word, 1)).reduce_by_key(lambda x, y: x + y)\r\n# -> [('what', 1), ('word', 1), ('of', 2), ('english', 1), ('the', 2), ('counting', 1), ('why', 1)]\r\n```\r\n\r\n## List of supported functions\r\n### List to List\r\n* tail: get everything except first element\r\n* drop: drop first n elements\r\n* drop_while: drop first elements using f\r\n* take: take first n elements\r\n* take_while: take first elements using f\r\n* map: map f onto sequence\r\n* filter: filter sequence by f\r\n* filter_not: filter sequence by not f\r\n* reverse: reverse sequence\r\n* distinct: return set of unique/distinct elements\r\n* flatten\r\n* flat_map\r\n* group_by\r\n* enumerate, zip_with_index\r\n* partition\r\n* slice\r\n* zip\r\n* sorted\r\n\r\n### List of (Key, Value) to List\r\n* reduce_by_key\r\n* group_by_key\r\n\r\n### List to Value\r\n* head, first: get first element\r\n* head_option: get first element or None\r\n* last: get last element\r\n* reduce: reduce sequence using f\r\n* count, len, size: get count of sequence\r\n* any\r\n* all, for_all\r\n* max, max_by\r\n* min, min_by\r\n* find\r\n* empty\r\n* non_empty\r\n* string: similar to mkString\r\n* sum\r\n\r\n### Conversion to other types\r\n* set\r\n* list\r\n* to_dict\r\n\r\n## Future work\r\n* Continue to find bugs and fix bugs\r\n* Continue adding features from either scala collections or spark (or other methods in the same spirit)\r\n* Continue adding tests\r\n\r\n## Contributing and Bug Fixes\r\nThis project is very, very new, so any feedback would be great!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}