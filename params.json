{"name":"ScalaFunctional","tagline":"Python library for functional programming with collections in a data pipeline style","body":"# ScalaFunctional\r\n[<img src=\"https://travis-ci.org/EntilZha/ScalaFunctional.svg?branch=master\"/>](https://travis-ci.org/EntilZha/ScalaFunctional)\r\n[![Coverage Status](https://coveralls.io/repos/EntilZha/ScalaFunctional/badge.svg?branch=master&service=github)](https://coveralls.io/r/EntilZha/ScalaFunctional?branch=master)\r\n[![ReadTheDocs](https://readthedocs.org/projects/scalafunctional/badge/?version=latest)](https://readthedocs.org/projects/scalafunctional/)\r\n[![Latest Version](https://badge.fury.io/py/scalafunctional.svg)](https://pypi.python.org/pypi/scalafunctional/)\r\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/EntilZha/ScalaFunctional?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\r\n\r\n## Introduction\r\n`ScalaFunctional` is a Python package that makes working with data easy. It takes inspiration from\r\nseveral sources that include Scala collections, Apache Spark RDDs, Microsoft LINQ and more generally\r\nfunctional programming. The combination of these ideas makes `ScalaFunctional` a great choice\r\nfor declarative transformation and analysis of data.\r\n\r\n[Original blog post for ScalaFunctional](http://entilzha.github.io/blog/2015/03/14/functional-programming-collections-python/)\r\n\r\n## Installation\r\n`ScalaFunctional` is available on [pypi](https://pypi.python.org/pypi/ScalaFunctional) and can be installed by running:\r\n```bash\r\n# Install from command line\r\n$ pip install scalafunctional\r\n```\r\n\r\nThen in python run: `from functional import seq`\r\n\r\n## Examples\r\n`ScalaFunctional` is useful for many tasks, and can natively open several common file types. Here\r\nare a few examples of what you can do.\r\n\r\n### Simple Example\r\n```python\r\nfrom functional import seq\r\n\r\nseq(1, 2, 3, 4)\\\r\n    .map(lambda x: x * 2)\\\r\n    .filter(lambda x: x > 4)\\\r\n    .reduce(lambda x, y: x + y)\r\n# 14\r\n```\r\n\r\n### Filtering a list of account transactions\r\n```python\r\nfrom functional import seq\r\nfrom collections import namedtuple\r\n\r\nTransaction = namedtuple('Transaction', 'reason amount')\r\ntransactions = [\r\n    Transaction('github', 7),\r\n    Transaction('food', 10),\r\n    Transaction('coffee', 5),\r\n    Transaction('digitalocean', 5),\r\n    Transaction('food', 5),\r\n    Transaction('riotgames', 25),\r\n    Transaction('food', 10),\r\n    Transaction('amazon', 200),\r\n    Transaction('paycheck', -1000)\r\n]\r\n\r\n# Using the Scala/Spark inspired APIs\r\nfood_cost = seq(transactions)\\\r\n    .filter(lambda x: x.reason == 'food')\\\r\n    .map(lambda x: x.amount).sum()\r\n\r\n# Using the LINQ inspired APIs\r\nfood_cost = seq(transactions)\\\r\n    .where(lambda x: x.reason == 'food')\\\r\n    .select(lambda x: x.amount).sum()\r\n\r\n# Using ScalaFunctional with fn\r\nfrom fn import _\r\nfood_cost = seq(transactions).filter(_.reason == 'food').map(_.amount).sum()\r\n```\r\n\r\n### Word Count and Joins\r\nTse account transactions example could be done easily in pure python using list comprehensions. To\r\nshow some of the things `ScalaFunctional` excels at, take a look at a couple of word count examples.\r\n\r\n```python\r\nwords = 'I dont want to believe I want to know'.split(' ')\r\nseq(words).map(lambda word: (word, 1)).reduce_by_key(lambda x, y: x + y)\r\n# [('dont', 1), ('I', 2), ('to', 2), ('know', 1), ('want', 2), ('believe', 1)]\r\n```\r\n\r\nIn the next example we have chat logs formatted in jsonl which contain messages and metadata. A\r\ntypical json file will have one valid json on each line of a file. Below are a few lines out of\r\n`examples/chat_logs.jsonl`.\r\n\r\n```jsonl\r\n{\"message\":\"hello anyone there?\",\"date\":\"10/09\",\"user\":\"bob\"}\r\n{\"message\":\"need some help with a program\",\"date\":\"10/09\",\"user\":\"bob\"}\r\n{\"message\":\"sure thing. What do you need help with?\",\"date\":\"10/09\",\"user\":\"dave\"}\r\n```\r\n\r\n```python\r\nfrom operator import add\r\nimport re\r\nmessages = seq.jsonl('examples/chat_lots.jsonl')\r\n\r\n# Split words on space and normalize before doing word count\r\ndef extract_words(message):\r\n    return re.sub('[^0-9a-z ]+', '', message.lower()).split(' ')\r\n\r\n\r\nword_counts = messages\\\r\n    .map(lambda log: extract_words(log['message']))\\\r\n    .flatten().map(lambda word: (word, 1))\\\r\n    .reduce_by_key(add).order_by(lambda x: x[1])\r\n\r\n```\r\n\r\nNext, lets continue that example but introduce a json database of users from `examples/users.json`.\r\nIn the previous example we showed how `ScalaFunctional` can do word counts, in the next example lets\r\nshow how `ScalaFunctional` can join different data sources.\r\n\r\n```python\r\n# First read the json file\r\nusers = seq.json('examples/users.json')\r\n#[('sarah',{'date_created':'08/08','news_email':True,'email':'sarah@gmail.com'}),...]\r\n\r\nemail_domains = users.map(lambda u: u[1]['email'].split('@')[1]).distinct()\r\n# ['yahoo.com', 'python.org', 'gmail.com']\r\n\r\n# Join users with their messages\r\nmessage_tuples = messages.group_by(lambda m: m['user'])\r\ndata = users.inner_join(message_tuples)\r\n# [('sarah', \r\n#    (\r\n#      {'date_created':'08/08','news_email':True,'email':'sarah@gmail.com'},\r\n#      [{'date':'10/10','message':'what is a...','user':'sarah'}...]\r\n#    )\r\n#  ),...]\r\n\r\n# From here you can imagine doing more complex analysis\r\n```\r\n\r\n### CSV, Aggregate Functions, and Set functions\r\nIn `examples/camping_purchases.csv` there are a list of camping purchases. Lets do some cost analysis and\r\ncompare it the required camping gear list stored in `examples/gear_list.txt`.\r\n\r\n```python\r\npurchases = seq.csv('examples/camping_purchases.csv')\r\ntotal_cost = purchases.select(lambda row: int(row[2])).sum()\r\n# 1275\r\n\r\nmost_expensive_item = purchases.max_by(lambda row: int(row[2]))\r\n# ['4', 'sleeping bag', ' 350']\r\n\r\npurchased_list = purchases.select(lambda row: row[1])\r\ngear_list = seq.open('examples/gear_list.txt').map(lambda row: row.strip())\r\nmissing_gear = gear_list.difference(purchased_list)\r\n# ['water bottle','gas','toilet paper','lighter','spoons','sleeping pad',...]\r\n```\r\n\r\nIn addition to the aggregate functions show above (`sum` and `max_by`) there are many more.\r\nSimilarly, there are several more set like functions in addition to `difference`.\r\n\r\n### Writing to files\r\nJust as `ScalaFunctional` can read from `csv`, `json`, `jsonl`, and text files, it can also write\r\nthem. For complete API documentation see the collections API table or the official docs.\r\n\r\n\r\n\r\n## Documentation\r\nSummary documentation is below and full documentation is at\r\n[scalafunctional.readthedocs.org](http://scalafunctional.readthedocs.org/en/latest/functional.html).\r\n\r\n### Streams, Transformations and Actions\r\n`ScalaFunctional` has three types of functions:\r\n\r\n1. Streams: read data for use by the collections API.\r\n2. Transformations: transform data from streams with functions such as `map`, `flat_map`, and `filter`\r\n3. Actions: These cause a series of transformations to evaluate to a concrete value. `to_list`, `reduce`, and `to_dict` are examples of actions.\r\n\r\nIn the expression `seq(1, 2, 3).map(lambda x: x * 2).reduce(lambda x, y: x + y)`, `seq` is the\r\nstream, `map` is the transformation, and `reduce` is the action.\r\n\r\n### Streams API\r\nAll of `ScalaFunctional` streams can be accessed through the `seq` object. The primary way to create\r\na stream is by calling `seq` with an iterable. The `seq` callable is smart and is able to accept\r\nmultiple types of parameters as shown in the examples below.\r\n\r\n```python\r\n# Passing a list\r\nseq([1, 1, 2, 3]).to_set()\r\n# [1, 2, 3]\r\n\r\n# Passing direct arguments\r\nseq(1, 1, 2, 3).map(lambda x: x).to_list()\r\n# [1, 1, 2, 3]\r\n\r\n# Passing a single value\r\nseq(1).map(lambda x: -x).to_list()\r\n# [-1]\r\n```\r\n\r\n`seq` also provides entry to other streams as attribute functions as shown below.\r\n\r\n```python\r\n# number range\r\nseq.range(10)\r\n\r\n# text file\r\nseq.open('filepath')\r\n\r\n# json file\r\nseq.json('filepath')\r\n\r\n# jsonl file\r\nseq.jsonl('filepath')\r\n\r\n# csv file\r\nseq.csv('filepath')\r\n```\r\n\r\nFor more information on the parameters that these functions can take, reference the\r\n[streams documentation](http://scalafunctional.readthedocs.org/en/latest/functional.html#module-functional.streams)\r\n\r\n### Transformations and Actions APIs\r\nBelow is the complete list of functions which can be called on a stream object from `seq`. For\r\ncomplete documentation reference \r\n[transformation and actions API](http://scalafunctional.readthedocs.org/en/latest/functional.html#module-functional.pipeline).\r\n\r\nFunction | Description | Type\r\n ------- | -----------  | ----\r\n`map(func)/select(func)` | Maps `func` onto elements of sequence | transformation\r\n`filter(func)/where(func)` | Filters elements of sequence to only those where `func(element)` is `True` | transformation\r\n`filter_not(func)` | Filters elements of sequence to only those where `func(element)` is `False` | transformation\r\n`flatten()` | Flattens sequence of lists to a single sequence | transformation\r\n`flat_map(func)` | `func` must return an iterable. Maps `func` to each element, then merges the result to one flat sequence | transformation\r\n`group_by(func)` | Groups sequence into `(key, value)` pairs where `key=func(element)` and `value` is from the original sequence | transformation\r\n`group_by_key()` | Groups sequence of `(key, value)` pairs by `key` | transformation\r\n`reduce_by_key(func)` | Reduces list of `(key, value)` pairs using `func` | transformation\r\n`union(other)` | Union of unique elements in sequence and `other` | transformation\r\n`intersection(other)` | Intersection of unique elements in sequence and `other` | transformation\r\n`difference(other)` | New sequence with unique elements present in sequence but not in `other` | transformation\r\n`symmetric_difference(other)` | New sequence with unique elements present in sequnce or `other`, but not both | transformation\r\n`distinct()` | Returns distinct elements of sequence. Elements must be hashable | transformation\r\n`distinct_by(func)` | Returns distinct elements of sequence using `func` as a key | transformation\r\n`drop(n)` | Drop the first `n` elements of the sequence | transformation\r\n`drop_right(n)` | Drop the last `n` elements of the sequence | transformation\r\n`drop_while(func)` | Drop elements while `func` evaluates to `True`, then returns the rest | transformation\r\n`take(n)` | Returns sequence of first `n` elements | transformation\r\n`take_while(func)` | Take elements while `func` evaluates to `True`, then drops the rest | transformation\r\n`init()` | Returns sequence without the last element | transformation\r\n`tail()` | Returns sequence without the first element | transformation\r\n`inits()` | Returns consecutive inits of sequence | transformation\r\n`tails()` | Returns consecutive tails of sequence | transformation\r\n`zip(other)` | Zips the sequence with `other` | transformation\r\n`zip_with_index()` | Zips the sequence with the index starting at zero on the left side | transformation\r\n`enumerate(start=0)` | Zips the sequence with the index starting at `start` on the left side | transformation\r\n`inner_join(other)` | Returns inner join of sequence with other. Must be a sequence of `(key, value)` pairs | transformation\r\n`outer_join(other)` | Returns outer join of sequence with other. Must be a sequence of `(key, value)` pairs | transformation\r\n`left_join(other)` | Returns left join of sequence with other. Must be a sequence of `(key, value)` pairs | transformation\r\n`right_join(other)` | Returns right join of sequence with other. Must be a sequence of `(key, value)` pairs | transformation\r\n`join(other, join_type='inner')` | Returns join of sequence with other as specified by `join_type`. Must be a sequence of `(key, value)` pairs | transformation\r\n`partition(func)` | Partitions the sequence into elements which satisfy `func(element)` and those that don't | transformation\r\n`grouped(size)` | Partitions the elements into groups of size `size` | transformation\r\n`sorted(key=None, reverse=False)/order_by(func)` | Returns elements sorted according to python `sorted` | transformation\r\n`reverse()` | Returns the reversed sequence | transformation\r\n`slice(start, until)` | Sequence starting at `start` and including elements up to `until` | transformation\r\n`head()` / `first()` | Returns first element in sequence | action\r\n`head_option()` | Returns first element in sequence or `None` if its empty | action\r\n`last()` | Returns last element in sequence | action\r\n`last_option()` | Returns last element in sequence or `None` if its empty | action\r\n`len()` / `size()` | Returns length of sequence | action\r\n`count(func)` | Returns count of elements in sequence where `func(element)` is True | action\r\n`empty()` | Returns `True` if the sequence has zero length | action\r\n`non_empty()` | Returns `True` if sequence has non-zero length | action\r\n`all()` | Returns `True` if all elements in sequence are truthy | action\r\n`exists(func)` | Returns `True` if `func(element)` for any element in the sequence is `True` | action\r\n`for_all(func)` | Returns `True` if `func(element)` is `True` for all elements in the sequence | action\r\n`find(func)` | Returns the element that first evaluates `func(element)` to `True` | action\r\n`any()` | Returns `True` if any element in sequence is truthy | action\r\n`max()` | Returns maximal element in sequence | action\r\n`min()` | Returns minimal element in sequence | action\r\n`max_by(func)` | Returns element with maximal value `func(element)` | action\r\n`min_by(func)` | Returns element with minimal value `func(element)` | action\r\n`sum()` | Returns the sum of elements | action\r\n`product()` | Returns the product of elements | action\r\n`average()` | Returns the average of elements | action\r\n`aggregate(func)/aggregate(seed, func)/aggregate(seed, func, result_map)` | Aggregate using `func` starting with `seed` or first element of list then apply `result_map` to the result | action\r\n`fold_left(zero_value, func)` | Reduces element from left to right using `func` and initial value `zero_value` | action\r\n`fold_right(zero_value, func)` | Reduces element from right to left using `func` and initial value `zero_value` | action\r\n`make_string(separator)` | Returns string with `separator` between each `str(element)` | action\r\n`dict(default=None)` / `to_dict(default=None)` | Converts a sequence of `(Key, Value)` pairs to a `dictionary`. If `default` is not None, it must be a value or zero argument callable which will be used to create a `collections.defaultdict` | action\r\n`list()` / `to_list()` | Converts sequence to a list | action\r\n`set() / to_set()` | Converts sequence to a set | action\r\n`to_file(path)` | Saves the sequence to a file at path with each element on a newline | action\r\n`to_csv(path)` | Saves the sequence to a csv file at path with each element representing a row | action\r\n`to_jsonl(path)` | Saves the sequence to a jsonl file with each element being transformed to json and printed to a new line | action\r\n`to_json(path)` | Saves the sequence to a json file. The contents depend on if the json root is an array or dictionary | action\r\n`cache()` | Forces evaluation of sequence immediately and caches the result | action\r\n`for_each(func)` | Executes `func` on each element of the sequence | action\r\n\r\n\r\n## Road Map\r\n* Parallel execution engine for faster computation `0.5.0`\r\n* SQL based query planner and interpreter (TBD on if/when/how this would be done)\r\n* When is this ready for `1.0`?\r\n* Perhaps think of a better name that better suits this package than `ScalaFunctional`\r\n\r\n## Contributing and Bug Fixes\r\nAny contributions or bug reports are welcome. Thus far, there is a 100% acceptance rate for pull\r\nrequests and contributors have offered valuable feedback and critique on code. It is great to hear\r\nfrom users of the package, especially what it is used for, what works well, and what could be\r\nimproved.\r\n\r\n## Contact/Email list/Chat\r\n[Google Groups mailing list](https://groups.google.com/forum/#!forum/scalafunctional)\r\n\r\n[Gitter for chat](https://gitter.im/EntilZha/ScalaFunctional)\r\n\r\n## Supported Python Versions\r\n`ScalaFunctional` supports and is tested against Python 2.7, 3.3, 3.4, 3.5, PyPy, and PyPy3\r\n\r\n## Changelog\r\n[Changelog](https://github.com/EntilZha/ScalaFunctional/CHANGELOG.md)\r\n\r\n","google":"UA-69620309-1","note":"Don't delete this file! It's used internally to help with page regeneration."}